-- ===================================================================
-- Browsergame Database Schema - Modular Orchestrator
-- ===================================================================
-- 
-- This file explains the NEW modular database structure that replaces
-- the previous monolithic database.sql file.
-- 
-- THE OLD SYSTEM (database_monolithic_backup.sql):
-- - Single 1400+ line file with everything inline
-- - Hard to maintain and modify
-- - Difficult to understand loading dependencies
-- - Mixed concerns (setup, tables, data, procedures, views, events)
-- 
-- THE NEW MODULAR SYSTEM:
-- - Organized files by functionality and loading phase
-- - Clear separation of concerns
-- - Proper dependency management
-- - Easy to maintain and extend
-- 
-- ===================================================================
-- MODULAR LOADING SEQUENCE
-- ===================================================================
-- 
-- The database is now built through Docker's initdb.d in this order:
-- 
-- PHASE 1: SETUP
-- 01-database-setup.sql          Database creation, users, permissions
-- 
-- PHASE 2: TABLE STRUCTURE (dependency order)
-- 02-core-tables.sql             Core game tables (Player, Settlement, Map, Buildings)
-- 03-military-tables.sql         Military units and training
-- 04-research-tables.sql         Research system
-- 05-kaserne-tables.sql          Kaserne (barracks) system
-- 06-travel-tables.sql           Travel and movement system
-- 07-battle-tables.sql           Battle and combat system
-- 
-- PHASE 3: CONFIGURATION DATA (when loaded)
-- 10-initial-data.sql            Core building configurations (ALWAYS needed)
-- 11-military-data.sql           Military unit configurations (after military tables)
-- 12-research-data.sql           Research configurations (after research tables)
-- 13-kaserne-data.sql            Kaserne configurations (after kaserne tables)
-- 14-military-travel-data.sql    Travel configurations (after travel tables)
-- 
-- PHASE 4: STORED PROCEDURES (when needed)
-- 20-player-procedures.sql       Player management (after core tables)
-- 21-building-procedures.sql     Building operations (after buildings)
-- 22-military-procedures.sql     Military operations (after military)
-- 23-travel-procedures.sql       Travel operations (after travel)
-- 24-initialization-procedures.sql  Database initialization and validation
-- 
-- PHASE 5: VIEWS (depend on tables and procedures)
-- 30-game-views.sql              Core game views for application
-- 31-enhanced-views.sql          Advanced views for complex queries
-- 
-- PHASE 6: AUTOMATION (background processing)
-- 40-database-events.sql         Automated events for resource generation, etc.
-- 
-- PHASE 7: FINALIZATION
-- 99-final-setup.sql             Enable events, validation, final setup
-- 
-- ===================================================================
-- DATA LOADING STRATEGY - WHEN DATA IS NEEDED
-- ===================================================================
-- 
-- BOOTSTRAP TIME (game setup):
-- - Database structure (tables)
-- - Core configuration data (building costs, etc.)
-- - Essential procedures for game operations
-- 
-- RUNTIME (when players play):
-- - Views for efficient data access
-- - Events for background processing (resource generation)
-- - Military/travel procedures for player actions
-- 
-- DEVELOPMENT TIME (when adding features):
-- - New tables in appropriate phase
-- - Configuration data after table creation
-- - Procedures that use the new tables
-- - Views that expose the new functionality
-- 
-- ===================================================================
-- HOW TO USE THE MODULAR SYSTEM
-- ===================================================================
-- 
-- FOR DOCKER DEPLOYMENT:
-- The docker-compose.yml automatically loads all files in the correct order.
-- Just run: docker compose up -d db
-- 
-- FOR MANUAL MYSQL DEPLOYMENT:
-- You can use the database_modular_working.sql file which uses SOURCE commands
-- to load the modular files in the correct order.
-- 
-- FOR DEVELOPMENT:
-- - Edit individual files in sql/tables/, sql/data/, sql/procedures/, sql/views/
-- - Add new files following the naming convention
-- - Update docker-compose.yml if you add new files
-- - Test changes by recreating the database: docker compose down && docker volume rm browsergame_db_data && docker compose up -d db
-- 
-- ===================================================================
-- FILE ORGANIZATION
-- ===================================================================
-- 
-- sql/
-- ├── 01-database-setup.sql              Bootstrap phase
-- ├── 99-final-setup.sql                 Finalization phase
-- ├── tables/                            Table definitions
-- │   ├── core_tables.sql                ├── Essential game structure
-- │   ├── military_tables.sql            ├── Military system
-- │   ├── research_tables.sql            ├── Research system
-- │   ├── kaserne_tables.sql             ├── Kaserne system
-- │   ├── travel_tables.sql              ├── Travel system
-- │   └── battle_tables.sql              └── Battle system
-- ├── data/                              Configuration data
-- │   ├── initial_data.sql               ├── Core configurations
-- │   ├── military_data.sql              ├── Military configurations
-- │   ├── research_data.sql              ├── Research configurations
-- │   ├── kaserne_data.sql               ├── Kaserne configurations
-- │   ├── military_travel_data.sql       ├── Travel configurations
-- │   └── database_events.sql            └── Automation events
-- ├── procedures/                        Stored procedures
-- │   ├── player_procedures.sql          ├── Player management
-- │   ├── building_procedures.sql        ├── Building operations
-- │   ├── military_procedures.sql        ├── Military operations
-- │   ├── travel_procedures.sql          ├── Travel operations
-- │   └── initialization_procedures.sql  └── Database utilities
-- ├── views/                             Database views
-- │   ├── game_views.sql                 ├── Core game views
-- │   └── enhanced_views.sql             └── Advanced views
-- ├── database_monolithic_backup.sql     Old monolithic file (backup)
-- └── database_modular_working.sql       Manual deployment script
-- 
-- ===================================================================
-- MONITORING THE MODULAR LOADING
-- ===================================================================
-- 
-- The system creates a _ModularLoadingProgress table to track loading phases:
-- 
-- SELECT * FROM _ModularLoadingProgress ORDER BY loaded_at;
-- 
-- This shows which phases completed successfully and when.
-- 
-- ===================================================================
-- BENEFITS OF THE NEW SYSTEM
-- ===================================================================
-- 
-- 1. MAINTAINABILITY: Easy to find and modify specific functionality
-- 2. DEPENDENCY MANAGEMENT: Clear loading order prevents dependency issues  
-- 3. MODULARITY: Can add/remove features by adding/removing files
-- 4. DEBUGGING: Easy to isolate issues to specific components
-- 5. COLLABORATION: Multiple developers can work on different files
-- 6. TESTING: Can test individual components separately
-- 7. PERFORMANCE: Only load what you need for specific environments
-- 
-- ===================================================================

-- This orchestrator file is for documentation only.
-- The actual database loading is handled by docker-compose.yml
-- which mounts the individual modular files to the container.

SELECT 'This is the modular database orchestrator documentation file' AS info,
       'The actual database is loaded via docker-compose.yml using the modular files' AS deployment_method,
       'See sql/database_modular_working.sql for manual deployment' AS manual_option,
       'The old monolithic file is preserved as sql/database_monolithic_backup.sql' AS backup_location;